// <auto-generated />
using System;
using ETrainerWEB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ETrainerWEB.Migrations
{
    [DbContext(typeof(ETrainerDbContext))]
    [Migration("20211109010935_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Polish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("ETrainerWEB.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CaloricityPerGram")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("PortionWeight")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("ETrainerWEB.Models.DishesIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishesIngredients");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("ETrainerWEB.Models.ExerciseSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ExerciseSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NazwaTypu",
                            Properties = "XD"
                        });
                });

            modelBuilder.Entity("ETrainerWEB.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CaloricityPerGram")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("PortionWeight")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("ETrainerWEB.Models.MealsDishes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealsDishes");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("ETrainerWEB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("ETrainerWEB.Models.WorkoutSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.WorkoutSchemasExercisesSchemas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExerciseSchemaId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutSchemaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseSchemaId");

                    b.HasIndex("WorkoutSchemaId");

                    b.ToTable("WorkoutSchemasExercisesSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.DishesIngredients", b =>
                {
                    b.HasOne("ETrainerWEB.Models.Dish", null)
                        .WithMany("DishesIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrainerWEB.Models.Ingredient", null)
                        .WithMany("DishesIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.Exercise", b =>
                {
                    b.HasOne("ETrainerWEB.Models.ExerciseType", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrainerWEB.Models.Workout", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.ExerciseSchema", b =>
                {
                    b.HasOne("ETrainerWEB.Models.ExerciseType", null)
                        .WithMany("ExerciseSchemas")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrainerWEB.Models.User", null)
                        .WithMany("ExerciseSchemas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.Meal", b =>
                {
                    b.HasOne("ETrainerWEB.Models.User", null)
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.MealsDishes", b =>
                {
                    b.HasOne("ETrainerWEB.Models.Dish", null)
                        .WithMany("MealsDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrainerWEB.Models.Meal", null)
                        .WithMany("MealsDishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.Measurement", b =>
                {
                    b.HasOne("ETrainerWEB.Models.User", null)
                        .WithOne("Measurement")
                        .HasForeignKey("ETrainerWEB.Models.Measurement", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.Workout", b =>
                {
                    b.HasOne("ETrainerWEB.Models.User", null)
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.WorkoutSchema", b =>
                {
                    b.HasOne("ETrainerWEB.Models.User", null)
                        .WithMany("WorkoutSchemas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.WorkoutSchemasExercisesSchemas", b =>
                {
                    b.HasOne("ETrainerWEB.Models.ExerciseSchema", null)
                        .WithMany("WorkoutSchemasExercisesSchemas")
                        .HasForeignKey("ExerciseSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrainerWEB.Models.WorkoutSchema", null)
                        .WithMany("WorkoutSchemasExercisesSchemas")
                        .HasForeignKey("WorkoutSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrainerWEB.Models.Dish", b =>
                {
                    b.Navigation("DishesIngredients");

                    b.Navigation("MealsDishes");
                });

            modelBuilder.Entity("ETrainerWEB.Models.ExerciseSchema", b =>
                {
                    b.Navigation("WorkoutSchemasExercisesSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.ExerciseType", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("ExerciseSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Ingredient", b =>
                {
                    b.Navigation("DishesIngredients");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Meal", b =>
                {
                    b.Navigation("MealsDishes");
                });

            modelBuilder.Entity("ETrainerWEB.Models.User", b =>
                {
                    b.Navigation("ExerciseSchemas");

                    b.Navigation("Meals");

                    b.Navigation("Measurement");

                    b.Navigation("Workouts");

                    b.Navigation("WorkoutSchemas");
                });

            modelBuilder.Entity("ETrainerWEB.Models.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("ETrainerWEB.Models.WorkoutSchema", b =>
                {
                    b.Navigation("WorkoutSchemasExercisesSchemas");
                });
#pragma warning restore 612, 618
        }
    }
}
